package input

import (
	"context"
	"encoding/json"
	"errors"

	"github.com/daabr/chrome-vision/pkg/cdp"
)

// DispatchDragEvent contains the parameters, and acts as
// a Go receiver, for the CDP command `dispatchDragEvent`.
//
// Dispatches a drag event into the page.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchDragEvent
//
// This CDP method is experimental.
type DispatchDragEvent struct {
	// Type of the drag event.
	Type string `json:"type"`
	// X coordinate of the event relative to the main frame's viewport in CSS pixels.
	X float64 `json:"x"`
	// Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
	// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Y    float64  `json:"y"`
	Data DragData `json:"data"`
	// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`
}

// NewDispatchDragEvent constructs a new DispatchDragEvent struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchDragEvent
//
// This CDP method is experimental.
func NewDispatchDragEvent(t string, x float64, y float64, data DragData) *DispatchDragEvent {
	return &DispatchDragEvent{
		Type: t,
		X:    x,
		Y:    y,
		Data: data,
	}
}

// SetModifiers adds or modifies the value of the optional
// parameter `modifiers` in the DispatchDragEvent CDP command.
//
// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
// (default: 0).
func (t *DispatchDragEvent) SetModifiers(v int64) *DispatchDragEvent {
	t.Modifiers = v
	return t
}

// Do sends the DispatchDragEvent CDP command to a browser,
// and returns the browser's response.
func (t *DispatchDragEvent) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.dispatchDragEvent", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// DispatchKeyEvent contains the parameters, and acts as
// a Go receiver, for the CDP command `dispatchKeyEvent`.
//
// Dispatches a key event to the page.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
type DispatchKeyEvent struct {
	// Type of the key event.
	Type string `json:"type"`
	// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`
	// Time at which the event occurred.
	Timestamp *TimeSinceEpoch `json:"timestamp,omitempty"`
	// Text as generated by processing a virtual key code with a keyboard layout. Not needed for
	// for `keyUp` and `rawKeyDown` events (default: "")
	Text string `json:"text,omitempty"`
	// Text that would have been generated by the keyboard if no modifiers were pressed (except for
	// shift). Useful for shortcut (accelerator) key handling (default: "").
	UnmodifiedText string `json:"unmodifiedText,omitempty"`
	// Unique key identifier (e.g., 'U+0041') (default: "").
	KeyIdentifier string `json:"keyIdentifier,omitempty"`
	// Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Code string `json:"code,omitempty"`
	// Unique DOM defined string value describing the meaning of the key in the context of active
	// modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	Key string `json:"key,omitempty"`
	// Windows virtual key code (default: 0).
	WindowsVirtualKeyCode int64 `json:"windowsVirtualKeyCode,omitempty"`
	// Native virtual key code (default: 0).
	NativeVirtualKeyCode int64 `json:"nativeVirtualKeyCode,omitempty"`
	// Whether the event was generated from auto repeat (default: false).
	AutoRepeat bool `json:"autoRepeat,omitempty"`
	// Whether the event was generated from the keypad (default: false).
	IsKeypad bool `json:"isKeypad,omitempty"`
	// Whether the event was a system key event (default: false).
	IsSystemKey bool `json:"isSystemKey,omitempty"`
	// Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
	// 0).
	Location int64 `json:"location,omitempty"`
	// Editing commands to send with the key event (e.g., 'selectAll') (default: []).
	// These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.
	// See https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.
	//
	// This CDP parameter is experimental.
	Commands []string `json:"commands,omitempty"`
}

// NewDispatchKeyEvent constructs a new DispatchKeyEvent struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
func NewDispatchKeyEvent(t string) *DispatchKeyEvent {
	return &DispatchKeyEvent{
		Type: t,
	}
}

// SetModifiers adds or modifies the value of the optional
// parameter `modifiers` in the DispatchKeyEvent CDP command.
//
// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
// (default: 0).
func (t *DispatchKeyEvent) SetModifiers(v int64) *DispatchKeyEvent {
	t.Modifiers = v
	return t
}

// SetTimestamp adds or modifies the value of the optional
// parameter `timestamp` in the DispatchKeyEvent CDP command.
//
// Time at which the event occurred.
func (t *DispatchKeyEvent) SetTimestamp(v TimeSinceEpoch) *DispatchKeyEvent {
	t.Timestamp = &v
	return t
}

// SetText adds or modifies the value of the optional
// parameter `text` in the DispatchKeyEvent CDP command.
//
// Text as generated by processing a virtual key code with a keyboard layout. Not needed for
// for `keyUp` and `rawKeyDown` events (default: "")
func (t *DispatchKeyEvent) SetText(v string) *DispatchKeyEvent {
	t.Text = v
	return t
}

// SetUnmodifiedText adds or modifies the value of the optional
// parameter `unmodifiedText` in the DispatchKeyEvent CDP command.
//
// Text that would have been generated by the keyboard if no modifiers were pressed (except for
// shift). Useful for shortcut (accelerator) key handling (default: "").
func (t *DispatchKeyEvent) SetUnmodifiedText(v string) *DispatchKeyEvent {
	t.UnmodifiedText = v
	return t
}

// SetKeyIdentifier adds or modifies the value of the optional
// parameter `keyIdentifier` in the DispatchKeyEvent CDP command.
//
// Unique key identifier (e.g., 'U+0041') (default: "").
func (t *DispatchKeyEvent) SetKeyIdentifier(v string) *DispatchKeyEvent {
	t.KeyIdentifier = v
	return t
}

// SetCode adds or modifies the value of the optional
// parameter `code` in the DispatchKeyEvent CDP command.
//
// Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
func (t *DispatchKeyEvent) SetCode(v string) *DispatchKeyEvent {
	t.Code = v
	return t
}

// SetKey adds or modifies the value of the optional
// parameter `key` in the DispatchKeyEvent CDP command.
//
// Unique DOM defined string value describing the meaning of the key in the context of active
// modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
func (t *DispatchKeyEvent) SetKey(v string) *DispatchKeyEvent {
	t.Key = v
	return t
}

// SetWindowsVirtualKeyCode adds or modifies the value of the optional
// parameter `windowsVirtualKeyCode` in the DispatchKeyEvent CDP command.
//
// Windows virtual key code (default: 0).
func (t *DispatchKeyEvent) SetWindowsVirtualKeyCode(v int64) *DispatchKeyEvent {
	t.WindowsVirtualKeyCode = v
	return t
}

// SetNativeVirtualKeyCode adds or modifies the value of the optional
// parameter `nativeVirtualKeyCode` in the DispatchKeyEvent CDP command.
//
// Native virtual key code (default: 0).
func (t *DispatchKeyEvent) SetNativeVirtualKeyCode(v int64) *DispatchKeyEvent {
	t.NativeVirtualKeyCode = v
	return t
}

// SetAutoRepeat adds or modifies the value of the optional
// parameter `autoRepeat` in the DispatchKeyEvent CDP command.
//
// Whether the event was generated from auto repeat (default: false).
func (t *DispatchKeyEvent) SetAutoRepeat(v bool) *DispatchKeyEvent {
	t.AutoRepeat = v
	return t
}

// SetIsKeypad adds or modifies the value of the optional
// parameter `isKeypad` in the DispatchKeyEvent CDP command.
//
// Whether the event was generated from the keypad (default: false).
func (t *DispatchKeyEvent) SetIsKeypad(v bool) *DispatchKeyEvent {
	t.IsKeypad = v
	return t
}

// SetIsSystemKey adds or modifies the value of the optional
// parameter `isSystemKey` in the DispatchKeyEvent CDP command.
//
// Whether the event was a system key event (default: false).
func (t *DispatchKeyEvent) SetIsSystemKey(v bool) *DispatchKeyEvent {
	t.IsSystemKey = v
	return t
}

// SetLocation adds or modifies the value of the optional
// parameter `location` in the DispatchKeyEvent CDP command.
//
// Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
// 0).
func (t *DispatchKeyEvent) SetLocation(v int64) *DispatchKeyEvent {
	t.Location = v
	return t
}

// SetCommands adds or modifies the value of the optional
// parameter `commands` in the DispatchKeyEvent CDP command.
//
// Editing commands to send with the key event (e.g., 'selectAll') (default: []).
// These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.
// See https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.
//
// This CDP parameter is experimental.
func (t *DispatchKeyEvent) SetCommands(v []string) *DispatchKeyEvent {
	t.Commands = v
	return t
}

// Do sends the DispatchKeyEvent CDP command to a browser,
// and returns the browser's response.
func (t *DispatchKeyEvent) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.dispatchKeyEvent", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// InsertText contains the parameters, and acts as
// a Go receiver, for the CDP command `insertText`.
//
// This method emulates inserting text that doesn't come from a key press,
// for example an emoji keyboard or an IME.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-insertText
//
// This CDP method is experimental.
type InsertText struct {
	// The text to insert.
	Text string `json:"text"`
}

// NewInsertText constructs a new InsertText struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-insertText
//
// This CDP method is experimental.
func NewInsertText(text string) *InsertText {
	return &InsertText{
		Text: text,
	}
}

// Do sends the InsertText CDP command to a browser,
// and returns the browser's response.
func (t *InsertText) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.insertText", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// DispatchMouseEvent contains the parameters, and acts as
// a Go receiver, for the CDP command `dispatchMouseEvent`.
//
// Dispatches a mouse event to the page.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchMouseEvent
type DispatchMouseEvent struct {
	// Type of the mouse event.
	Type string `json:"type"`
	// X coordinate of the event relative to the main frame's viewport in CSS pixels.
	X float64 `json:"x"`
	// Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
	// the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Y float64 `json:"y"`
	// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`
	// Time at which the event occurred.
	Timestamp *TimeSinceEpoch `json:"timestamp,omitempty"`
	// Mouse button (default: "none").
	Button *MouseButton `json:"button,omitempty"`
	// A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
	// Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
	Buttons int64 `json:"buttons,omitempty"`
	// Number of times the mouse button was clicked (default: 0).
	ClickCount int64 `json:"clickCount,omitempty"`
	// The normalized pressure, which has a range of [0,1] (default: 0).
	//
	// This CDP parameter is experimental.
	Force float64 `json:"force,omitempty"`
	// The normalized tangential pressure, which has a range of [-1,1] (default: 0).
	//
	// This CDP parameter is experimental.
	TangentialPressure float64 `json:"tangentialPressure,omitempty"`
	// The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).
	//
	// This CDP parameter is experimental.
	TiltX int64 `json:"tiltX,omitempty"`
	// The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).
	//
	// This CDP parameter is experimental.
	TiltY int64 `json:"tiltY,omitempty"`
	// The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).
	//
	// This CDP parameter is experimental.
	Twist int64 `json:"twist,omitempty"`
	// X delta in CSS pixels for mouse wheel event (default: 0).
	DeltaX float64 `json:"deltaX,omitempty"`
	// Y delta in CSS pixels for mouse wheel event (default: 0).
	DeltaY float64 `json:"deltaY,omitempty"`
	// Pointer type (default: "mouse").
	PointerType string `json:"pointerType,omitempty"`
}

// NewDispatchMouseEvent constructs a new DispatchMouseEvent struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchMouseEvent
func NewDispatchMouseEvent(t string, x float64, y float64) *DispatchMouseEvent {
	return &DispatchMouseEvent{
		Type: t,
		X:    x,
		Y:    y,
	}
}

// SetModifiers adds or modifies the value of the optional
// parameter `modifiers` in the DispatchMouseEvent CDP command.
//
// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
// (default: 0).
func (t *DispatchMouseEvent) SetModifiers(v int64) *DispatchMouseEvent {
	t.Modifiers = v
	return t
}

// SetTimestamp adds or modifies the value of the optional
// parameter `timestamp` in the DispatchMouseEvent CDP command.
//
// Time at which the event occurred.
func (t *DispatchMouseEvent) SetTimestamp(v TimeSinceEpoch) *DispatchMouseEvent {
	t.Timestamp = &v
	return t
}

// SetButton adds or modifies the value of the optional
// parameter `button` in the DispatchMouseEvent CDP command.
//
// Mouse button (default: "none").
func (t *DispatchMouseEvent) SetButton(v MouseButton) *DispatchMouseEvent {
	t.Button = &v
	return t
}

// SetButtons adds or modifies the value of the optional
// parameter `buttons` in the DispatchMouseEvent CDP command.
//
// A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
// Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
func (t *DispatchMouseEvent) SetButtons(v int64) *DispatchMouseEvent {
	t.Buttons = v
	return t
}

// SetClickCount adds or modifies the value of the optional
// parameter `clickCount` in the DispatchMouseEvent CDP command.
//
// Number of times the mouse button was clicked (default: 0).
func (t *DispatchMouseEvent) SetClickCount(v int64) *DispatchMouseEvent {
	t.ClickCount = v
	return t
}

// SetForce adds or modifies the value of the optional
// parameter `force` in the DispatchMouseEvent CDP command.
//
// The normalized pressure, which has a range of [0,1] (default: 0).
//
// This CDP parameter is experimental.
func (t *DispatchMouseEvent) SetForce(v float64) *DispatchMouseEvent {
	t.Force = v
	return t
}

// SetTangentialPressure adds or modifies the value of the optional
// parameter `tangentialPressure` in the DispatchMouseEvent CDP command.
//
// The normalized tangential pressure, which has a range of [-1,1] (default: 0).
//
// This CDP parameter is experimental.
func (t *DispatchMouseEvent) SetTangentialPressure(v float64) *DispatchMouseEvent {
	t.TangentialPressure = v
	return t
}

// SetTiltX adds or modifies the value of the optional
// parameter `tiltX` in the DispatchMouseEvent CDP command.
//
// The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).
//
// This CDP parameter is experimental.
func (t *DispatchMouseEvent) SetTiltX(v int64) *DispatchMouseEvent {
	t.TiltX = v
	return t
}

// SetTiltY adds or modifies the value of the optional
// parameter `tiltY` in the DispatchMouseEvent CDP command.
//
// The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).
//
// This CDP parameter is experimental.
func (t *DispatchMouseEvent) SetTiltY(v int64) *DispatchMouseEvent {
	t.TiltY = v
	return t
}

// SetTwist adds or modifies the value of the optional
// parameter `twist` in the DispatchMouseEvent CDP command.
//
// The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).
//
// This CDP parameter is experimental.
func (t *DispatchMouseEvent) SetTwist(v int64) *DispatchMouseEvent {
	t.Twist = v
	return t
}

// SetDeltaX adds or modifies the value of the optional
// parameter `deltaX` in the DispatchMouseEvent CDP command.
//
// X delta in CSS pixels for mouse wheel event (default: 0).
func (t *DispatchMouseEvent) SetDeltaX(v float64) *DispatchMouseEvent {
	t.DeltaX = v
	return t
}

// SetDeltaY adds or modifies the value of the optional
// parameter `deltaY` in the DispatchMouseEvent CDP command.
//
// Y delta in CSS pixels for mouse wheel event (default: 0).
func (t *DispatchMouseEvent) SetDeltaY(v float64) *DispatchMouseEvent {
	t.DeltaY = v
	return t
}

// SetPointerType adds or modifies the value of the optional
// parameter `pointerType` in the DispatchMouseEvent CDP command.
//
// Pointer type (default: "mouse").
func (t *DispatchMouseEvent) SetPointerType(v string) *DispatchMouseEvent {
	t.PointerType = v
	return t
}

// Do sends the DispatchMouseEvent CDP command to a browser,
// and returns the browser's response.
func (t *DispatchMouseEvent) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.dispatchMouseEvent", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// DispatchTouchEvent contains the parameters, and acts as
// a Go receiver, for the CDP command `dispatchTouchEvent`.
//
// Dispatches a touch event to the page.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchTouchEvent
type DispatchTouchEvent struct {
	// Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
	// TouchStart and TouchMove must contains at least one.
	Type string `json:"type"`
	// Active touch points on the touch device. One event per any changed point (compared to
	// previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
	// one by one.
	TouchPoints []TouchPoint `json:"touchPoints"`
	// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`
	// Time at which the event occurred.
	Timestamp *TimeSinceEpoch `json:"timestamp,omitempty"`
}

// NewDispatchTouchEvent constructs a new DispatchTouchEvent struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchTouchEvent
func NewDispatchTouchEvent(t string, touchPoints []TouchPoint) *DispatchTouchEvent {
	return &DispatchTouchEvent{
		Type:        t,
		TouchPoints: touchPoints,
	}
}

// SetModifiers adds or modifies the value of the optional
// parameter `modifiers` in the DispatchTouchEvent CDP command.
//
// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
// (default: 0).
func (t *DispatchTouchEvent) SetModifiers(v int64) *DispatchTouchEvent {
	t.Modifiers = v
	return t
}

// SetTimestamp adds or modifies the value of the optional
// parameter `timestamp` in the DispatchTouchEvent CDP command.
//
// Time at which the event occurred.
func (t *DispatchTouchEvent) SetTimestamp(v TimeSinceEpoch) *DispatchTouchEvent {
	t.Timestamp = &v
	return t
}

// Do sends the DispatchTouchEvent CDP command to a browser,
// and returns the browser's response.
func (t *DispatchTouchEvent) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.dispatchTouchEvent", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// EmulateTouchFromMouseEvent contains the parameters, and acts as
// a Go receiver, for the CDP command `emulateTouchFromMouseEvent`.
//
// Emulates touch event from the mouse event parameters.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-emulateTouchFromMouseEvent
//
// This CDP method is experimental.
type EmulateTouchFromMouseEvent struct {
	// Type of the mouse event.
	Type string `json:"type"`
	// X coordinate of the mouse pointer in DIP.
	X int64 `json:"x"`
	// Y coordinate of the mouse pointer in DIP.
	Y int64 `json:"y"`
	// Mouse button. Only "none", "left", "right" are supported.
	Button MouseButton `json:"button"`
	// Time at which the event occurred (default: current time).
	Timestamp *TimeSinceEpoch `json:"timestamp,omitempty"`
	// X delta in DIP for mouse wheel event (default: 0).
	DeltaX float64 `json:"deltaX,omitempty"`
	// Y delta in DIP for mouse wheel event (default: 0).
	DeltaY float64 `json:"deltaY,omitempty"`
	// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
	// (default: 0).
	Modifiers int64 `json:"modifiers,omitempty"`
	// Number of times the mouse button was clicked (default: 0).
	ClickCount int64 `json:"clickCount,omitempty"`
}

// NewEmulateTouchFromMouseEvent constructs a new EmulateTouchFromMouseEvent struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-emulateTouchFromMouseEvent
//
// This CDP method is experimental.
func NewEmulateTouchFromMouseEvent(t string, x int64, y int64, button MouseButton) *EmulateTouchFromMouseEvent {
	return &EmulateTouchFromMouseEvent{
		Type:   t,
		X:      x,
		Y:      y,
		Button: button,
	}
}

// SetTimestamp adds or modifies the value of the optional
// parameter `timestamp` in the EmulateTouchFromMouseEvent CDP command.
//
// Time at which the event occurred (default: current time).
func (t *EmulateTouchFromMouseEvent) SetTimestamp(v TimeSinceEpoch) *EmulateTouchFromMouseEvent {
	t.Timestamp = &v
	return t
}

// SetDeltaX adds or modifies the value of the optional
// parameter `deltaX` in the EmulateTouchFromMouseEvent CDP command.
//
// X delta in DIP for mouse wheel event (default: 0).
func (t *EmulateTouchFromMouseEvent) SetDeltaX(v float64) *EmulateTouchFromMouseEvent {
	t.DeltaX = v
	return t
}

// SetDeltaY adds or modifies the value of the optional
// parameter `deltaY` in the EmulateTouchFromMouseEvent CDP command.
//
// Y delta in DIP for mouse wheel event (default: 0).
func (t *EmulateTouchFromMouseEvent) SetDeltaY(v float64) *EmulateTouchFromMouseEvent {
	t.DeltaY = v
	return t
}

// SetModifiers adds or modifies the value of the optional
// parameter `modifiers` in the EmulateTouchFromMouseEvent CDP command.
//
// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
// (default: 0).
func (t *EmulateTouchFromMouseEvent) SetModifiers(v int64) *EmulateTouchFromMouseEvent {
	t.Modifiers = v
	return t
}

// SetClickCount adds or modifies the value of the optional
// parameter `clickCount` in the EmulateTouchFromMouseEvent CDP command.
//
// Number of times the mouse button was clicked (default: 0).
func (t *EmulateTouchFromMouseEvent) SetClickCount(v int64) *EmulateTouchFromMouseEvent {
	t.ClickCount = v
	return t
}

// Do sends the EmulateTouchFromMouseEvent CDP command to a browser,
// and returns the browser's response.
func (t *EmulateTouchFromMouseEvent) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.emulateTouchFromMouseEvent", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// SetIgnoreInputEvents contains the parameters, and acts as
// a Go receiver, for the CDP command `setIgnoreInputEvents`.
//
// Ignores input events (useful while auditing page).
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-setIgnoreInputEvents
type SetIgnoreInputEvents struct {
	// Ignores input events processing when set to true.
	Ignore bool `json:"ignore"`
}

// NewSetIgnoreInputEvents constructs a new SetIgnoreInputEvents struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-setIgnoreInputEvents
func NewSetIgnoreInputEvents(ignore bool) *SetIgnoreInputEvents {
	return &SetIgnoreInputEvents{
		Ignore: ignore,
	}
}

// Do sends the SetIgnoreInputEvents CDP command to a browser,
// and returns the browser's response.
func (t *SetIgnoreInputEvents) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.setIgnoreInputEvents", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// SetInterceptDrags contains the parameters, and acts as
// a Go receiver, for the CDP command `setInterceptDrags`.
//
// Prevents default drag and drop behavior and instead emits `Input.dragIntercepted` events.
// Drag and drop behavior can be directly controlled via `Input.dispatchDragEvent`.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-setInterceptDrags
//
// This CDP method is experimental.
type SetInterceptDrags struct {
	Enabled bool `json:"enabled"`
}

// NewSetInterceptDrags constructs a new SetInterceptDrags struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-setInterceptDrags
//
// This CDP method is experimental.
func NewSetInterceptDrags(enabled bool) *SetInterceptDrags {
	return &SetInterceptDrags{
		Enabled: enabled,
	}
}

// Do sends the SetInterceptDrags CDP command to a browser,
// and returns the browser's response.
func (t *SetInterceptDrags) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.setInterceptDrags", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// SynthesizePinchGesture contains the parameters, and acts as
// a Go receiver, for the CDP command `synthesizePinchGesture`.
//
// Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-synthesizePinchGesture
//
// This CDP method is experimental.
type SynthesizePinchGesture struct {
	// X coordinate of the start of the gesture in CSS pixels.
	X float64 `json:"x"`
	// Y coordinate of the start of the gesture in CSS pixels.
	Y float64 `json:"y"`
	// Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	ScaleFactor float64 `json:"scaleFactor"`
	// Relative pointer speed in pixels per second (default: 800).
	RelativeSpeed int64 `json:"relativeSpeed,omitempty"`
	// Which type of input events to be generated (default: 'default', which queries the platform
	// for the preferred input type).
	GestureSourceType *GestureSourceType `json:"gestureSourceType,omitempty"`
}

// NewSynthesizePinchGesture constructs a new SynthesizePinchGesture struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-synthesizePinchGesture
//
// This CDP method is experimental.
func NewSynthesizePinchGesture(x float64, y float64, scaleFactor float64) *SynthesizePinchGesture {
	return &SynthesizePinchGesture{
		X:           x,
		Y:           y,
		ScaleFactor: scaleFactor,
	}
}

// SetRelativeSpeed adds or modifies the value of the optional
// parameter `relativeSpeed` in the SynthesizePinchGesture CDP command.
//
// Relative pointer speed in pixels per second (default: 800).
func (t *SynthesizePinchGesture) SetRelativeSpeed(v int64) *SynthesizePinchGesture {
	t.RelativeSpeed = v
	return t
}

// SetGestureSourceType adds or modifies the value of the optional
// parameter `gestureSourceType` in the SynthesizePinchGesture CDP command.
//
// Which type of input events to be generated (default: 'default', which queries the platform
// for the preferred input type).
func (t *SynthesizePinchGesture) SetGestureSourceType(v GestureSourceType) *SynthesizePinchGesture {
	t.GestureSourceType = &v
	return t
}

// Do sends the SynthesizePinchGesture CDP command to a browser,
// and returns the browser's response.
func (t *SynthesizePinchGesture) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.synthesizePinchGesture", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// SynthesizeScrollGesture contains the parameters, and acts as
// a Go receiver, for the CDP command `synthesizeScrollGesture`.
//
// Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-synthesizeScrollGesture
//
// This CDP method is experimental.
type SynthesizeScrollGesture struct {
	// X coordinate of the start of the gesture in CSS pixels.
	X float64 `json:"x"`
	// Y coordinate of the start of the gesture in CSS pixels.
	Y float64 `json:"y"`
	// The distance to scroll along the X axis (positive to scroll left).
	XDistance float64 `json:"xDistance,omitempty"`
	// The distance to scroll along the Y axis (positive to scroll up).
	YDistance float64 `json:"yDistance,omitempty"`
	// The number of additional pixels to scroll back along the X axis, in addition to the given
	// distance.
	XOverscroll float64 `json:"xOverscroll,omitempty"`
	// The number of additional pixels to scroll back along the Y axis, in addition to the given
	// distance.
	YOverscroll float64 `json:"yOverscroll,omitempty"`
	// Prevent fling (default: true).
	PreventFling bool `json:"preventFling,omitempty"`
	// Swipe speed in pixels per second (default: 800).
	Speed int64 `json:"speed,omitempty"`
	// Which type of input events to be generated (default: 'default', which queries the platform
	// for the preferred input type).
	GestureSourceType *GestureSourceType `json:"gestureSourceType,omitempty"`
	// The number of times to repeat the gesture (default: 0).
	RepeatCount int64 `json:"repeatCount,omitempty"`
	// The number of milliseconds delay between each repeat. (default: 250).
	RepeatDelayMs int64 `json:"repeatDelayMs,omitempty"`
	// The name of the interaction markers to generate, if not empty (default: "").
	InteractionMarkerName string `json:"interactionMarkerName,omitempty"`
}

// NewSynthesizeScrollGesture constructs a new SynthesizeScrollGesture struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-synthesizeScrollGesture
//
// This CDP method is experimental.
func NewSynthesizeScrollGesture(x float64, y float64) *SynthesizeScrollGesture {
	return &SynthesizeScrollGesture{
		X: x,
		Y: y,
	}
}

// SetXDistance adds or modifies the value of the optional
// parameter `xDistance` in the SynthesizeScrollGesture CDP command.
//
// The distance to scroll along the X axis (positive to scroll left).
func (t *SynthesizeScrollGesture) SetXDistance(v float64) *SynthesizeScrollGesture {
	t.XDistance = v
	return t
}

// SetYDistance adds or modifies the value of the optional
// parameter `yDistance` in the SynthesizeScrollGesture CDP command.
//
// The distance to scroll along the Y axis (positive to scroll up).
func (t *SynthesizeScrollGesture) SetYDistance(v float64) *SynthesizeScrollGesture {
	t.YDistance = v
	return t
}

// SetXOverscroll adds or modifies the value of the optional
// parameter `xOverscroll` in the SynthesizeScrollGesture CDP command.
//
// The number of additional pixels to scroll back along the X axis, in addition to the given
// distance.
func (t *SynthesizeScrollGesture) SetXOverscroll(v float64) *SynthesizeScrollGesture {
	t.XOverscroll = v
	return t
}

// SetYOverscroll adds or modifies the value of the optional
// parameter `yOverscroll` in the SynthesizeScrollGesture CDP command.
//
// The number of additional pixels to scroll back along the Y axis, in addition to the given
// distance.
func (t *SynthesizeScrollGesture) SetYOverscroll(v float64) *SynthesizeScrollGesture {
	t.YOverscroll = v
	return t
}

// SetPreventFling adds or modifies the value of the optional
// parameter `preventFling` in the SynthesizeScrollGesture CDP command.
//
// Prevent fling (default: true).
func (t *SynthesizeScrollGesture) SetPreventFling(v bool) *SynthesizeScrollGesture {
	t.PreventFling = v
	return t
}

// SetSpeed adds or modifies the value of the optional
// parameter `speed` in the SynthesizeScrollGesture CDP command.
//
// Swipe speed in pixels per second (default: 800).
func (t *SynthesizeScrollGesture) SetSpeed(v int64) *SynthesizeScrollGesture {
	t.Speed = v
	return t
}

// SetGestureSourceType adds or modifies the value of the optional
// parameter `gestureSourceType` in the SynthesizeScrollGesture CDP command.
//
// Which type of input events to be generated (default: 'default', which queries the platform
// for the preferred input type).
func (t *SynthesizeScrollGesture) SetGestureSourceType(v GestureSourceType) *SynthesizeScrollGesture {
	t.GestureSourceType = &v
	return t
}

// SetRepeatCount adds or modifies the value of the optional
// parameter `repeatCount` in the SynthesizeScrollGesture CDP command.
//
// The number of times to repeat the gesture (default: 0).
func (t *SynthesizeScrollGesture) SetRepeatCount(v int64) *SynthesizeScrollGesture {
	t.RepeatCount = v
	return t
}

// SetRepeatDelayMs adds or modifies the value of the optional
// parameter `repeatDelayMs` in the SynthesizeScrollGesture CDP command.
//
// The number of milliseconds delay between each repeat. (default: 250).
func (t *SynthesizeScrollGesture) SetRepeatDelayMs(v int64) *SynthesizeScrollGesture {
	t.RepeatDelayMs = v
	return t
}

// SetInteractionMarkerName adds or modifies the value of the optional
// parameter `interactionMarkerName` in the SynthesizeScrollGesture CDP command.
//
// The name of the interaction markers to generate, if not empty (default: "").
func (t *SynthesizeScrollGesture) SetInteractionMarkerName(v string) *SynthesizeScrollGesture {
	t.InteractionMarkerName = v
	return t
}

// Do sends the SynthesizeScrollGesture CDP command to a browser,
// and returns the browser's response.
func (t *SynthesizeScrollGesture) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.synthesizeScrollGesture", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}

// SynthesizeTapGesture contains the parameters, and acts as
// a Go receiver, for the CDP command `synthesizeTapGesture`.
//
// Synthesizes a tap gesture over a time period by issuing appropriate touch events.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-synthesizeTapGesture
//
// This CDP method is experimental.
type SynthesizeTapGesture struct {
	// X coordinate of the start of the gesture in CSS pixels.
	X float64 `json:"x"`
	// Y coordinate of the start of the gesture in CSS pixels.
	Y float64 `json:"y"`
	// Duration between touchdown and touchup events in ms (default: 50).
	Duration int64 `json:"duration,omitempty"`
	// Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	TapCount int64 `json:"tapCount,omitempty"`
	// Which type of input events to be generated (default: 'default', which queries the platform
	// for the preferred input type).
	GestureSourceType *GestureSourceType `json:"gestureSourceType,omitempty"`
}

// NewSynthesizeTapGesture constructs a new SynthesizeTapGesture struct instance, with
// all (but only) the required parameters. Optional parameters
// may be added using the builder-like methods below.
//
// https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-synthesizeTapGesture
//
// This CDP method is experimental.
func NewSynthesizeTapGesture(x float64, y float64) *SynthesizeTapGesture {
	return &SynthesizeTapGesture{
		X: x,
		Y: y,
	}
}

// SetDuration adds or modifies the value of the optional
// parameter `duration` in the SynthesizeTapGesture CDP command.
//
// Duration between touchdown and touchup events in ms (default: 50).
func (t *SynthesizeTapGesture) SetDuration(v int64) *SynthesizeTapGesture {
	t.Duration = v
	return t
}

// SetTapCount adds or modifies the value of the optional
// parameter `tapCount` in the SynthesizeTapGesture CDP command.
//
// Number of times to perform the tap (e.g. 2 for double tap, default: 1).
func (t *SynthesizeTapGesture) SetTapCount(v int64) *SynthesizeTapGesture {
	t.TapCount = v
	return t
}

// SetGestureSourceType adds or modifies the value of the optional
// parameter `gestureSourceType` in the SynthesizeTapGesture CDP command.
//
// Which type of input events to be generated (default: 'default', which queries the platform
// for the preferred input type).
func (t *SynthesizeTapGesture) SetGestureSourceType(v GestureSourceType) *SynthesizeTapGesture {
	t.GestureSourceType = &v
	return t
}

// Do sends the SynthesizeTapGesture CDP command to a browser,
// and returns the browser's response.
func (t *SynthesizeTapGesture) Do(ctx context.Context) error {
	b, err := json.Marshal(t)
	if err != nil {
		return err
	}
	response, err := cdp.Send(ctx, "Input.synthesizeTapGesture", b)
	if err != nil {
		return err
	}
	if response.Error != nil {
		return errors.New(response.Error.Error())
	}
	return nil
}
